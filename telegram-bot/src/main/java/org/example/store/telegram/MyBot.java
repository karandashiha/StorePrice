package org.example.store.telegram;

import org.example.store.products.Product;
import org.example.store.server.ProductFetcher;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


public class MyBot extends TelegramLongPollingBot {

    private final String token;

    // –¢—É—Ç –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —á–∏ —é–∑–µ—Ä –∑–∞—Ä–∞–∑ —É —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É
    private final Map<Long, Boolean> userSearchMode = new ConcurrentHashMap<>();

    public MyBot(String token) {
        this.token = token;
    }

    @Override
    public String getBotUsername() {
        return "atb_varus_silpo_price_bot";
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            CallbackHandler.handle(update, this);
            return;
        }

        Message message = update.getMessage();
        if (message != null && message.hasText()) {
            String text = message.getText();
            Long chatId = message.getChatId();

            switch (text) {
                case "/start":
                    userSearchMode.put(chatId, false);  // —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ—à—É–∫—É
                    sendMessageWithKeyboard(chatId,
                            "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä–∏.\n\n" +
                                    "–©–æ –≤–º—ñ—î —Ü–µ–π –±–æ—Ç:\n" +
                                    "1. –ü–æ—Ä—ñ–≤–Ω—é—î —Ü—ñ–Ω–∏ –Ω–∞ —Ç–æ–≤–∞—Ä–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤.\n" +
                                    "2. –î–æ–ø–æ–º–∞–≥–∞—î –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–Ω–∏–∂—á—É —Ü—ñ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä —É —Ä—ñ–∑–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.\n\n" +
                                    "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n" +
                                    "1. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ /start\n" +
                                    "2. –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É.\n" +
                                    "3. –ó–Ω–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —ñ –¥—ñ–∑–Ω–∞–π—Å—è, –¥–µ –≤—ñ–Ω –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π.");
                    break;

                case "üõç –û–≥–ª—è–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π":
                    userSearchMode.put(chatId, false);
                    CategoryButtons.sendGroupMenu(chatId, this, 0, null);
                    break;

                case "üîç –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π —Ç–æ–≤–∞—Ä":
                    userSearchMode.put(chatId, true);
                    sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: \"–º–æ–ª–æ–∫–æ\"). –î–ª—è –≤–∏—Ö–æ–¥—É –≤–≤–µ–¥—ñ—Ç—å '–í–∏–π—Ç–∏'.");
                    break;

                default:
                    boolean inSearchMode = userSearchMode.getOrDefault(chatId, false);
                    if (inSearchMode) {
                        if (text.equalsIgnoreCase("–≤–∏–π—Ç–∏")) {
                            userSearchMode.put(chatId, false);
                            sendMessageWithKeyboard(chatId, "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É.\n–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üîç –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π —Ç–æ–≤–∞—Ä.");
                        } else {
                            try {
                                Product product = ProductFetcher.fetchCheapestProduct(text.trim());
                                sendMessageWithKeyboard(chatId, "–ù–∞–π–¥–µ—à–µ–≤—à–∏–π —Ç–æ–≤–∞—Ä:\n" + product.toString());
                            } catch (IOException e) {
                                sendMessageWithKeyboard(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.");
                            }
                        }
                    }
                    break;
            }
        }
    }

    public void sendMessageWithKeyboard(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üõç –û–≥–ª—è–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîç –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π —Ç–æ–≤–∞—Ä");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
