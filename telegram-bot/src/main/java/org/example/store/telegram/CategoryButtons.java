package org.example.store.telegram;

import org.example.store.products.Product;
import org.example.store.server.ProductFetcher;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

public class CategoryButtons {
    private static final int ITEMS_PER_PAGE = 5;

    // –ú–∞–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    public static final Map<String, List<String>> categoryGroups = new LinkedHashMap<>() {{
        put("–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", Arrays.asList("–ú–æ–ª–æ–∫–æ", "–¢–≤–æ—Ä–æ–≥", "–°–º–µ—Ç–∞–Ω–∞", "–ô–æ–≥—É—Ä—Ç", "–ö–µ—Ñ—ñ—Ä"));
        put("–Ø–π—Ü—è", Arrays.asList("–Ø–π—Ü—è"));
        put("–û–≤–æ—á—ñ", Arrays.asList("–û–≥—ñ—Ä–æ–∫", "–ü–æ–º—ñ–¥–æ—Ä", "–ö–∞–ø—É—Å—Ç–∞", "–ü–µ—Ä–µ—Ü—å —Å–æ–ª–æ–¥–∫–∏–π", "–ö–∞—Ä—Ç–æ–ø–ª—è", "–ú–æ—Ä–∫–≤–∞", "–ë—É—Ä—è–∫", "–¶–∏–±—É–ª—è", "–ß–∞—Å–Ω–∏–∫", "–ö–∞–±–∞—á–æ–∫"));
        put("–§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏", Arrays.asList("–ë–∞–Ω–∞–Ω", "–Ø–±–ª—É–∫–æ", "–ú–∞–Ω–¥–∞—Ä–∏–Ω–∏", "–ê–≤–æ–∫–∞–¥–æ", "–õ–∏–º–æ–Ω", "–ê–ø–µ–ª—å—Å–∏–Ω", "–ö—ñ–≤—ñ"));
        put("–ë–∞–∫–∞–ª—ñ—è", Arrays.asList("–ë–æ—Ä–æ—à–Ω–æ", "–ö—Ä—É–ø–∞", "–ú–∞–π–æ–Ω–µ–∑", "–û–ª—ñ—è", "–¶—É–∫–æ—Ä", "–°—ñ–ª—å"));
        put("–ö—Ä—É–ø–∞", Arrays.asList("–ì—Ä–µ—á–∫–∞", "–†–∏—Å –∫—Ä—É–≥–ª–∏–π", "–†–∏—Å –¥–æ–≤–≥–∏–π", "–í—ñ–≤—Å—è–Ω–∫–∞", "–ì–æ—Ä–æ—Ö –∫—Ä—É–ø–∞"));
        put("–û–≤–æ—á—ñ —ñ —Ñ—Ä—É–∫—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ", Arrays.asList("–ö–∞–ø—É—Å—Ç–∞ –±—Ä–æ–∫–æ–ª—ñ", "–°—É–º—ñ—à –æ–≤–æ—á–µ–π"));
        put("–ü—Ä–∞–ª—å–Ω—ñ –ø–æ—Ä–æ—à–∫–∏ —Ç–∞ –∑–∞—Å–æ–±–∏ –¥–ª—è –ø—Ä–∞–Ω–Ω—è", Arrays.asList("–ü–æ–º'—è–∫—à—É–≤–∞—á –¥–ª—è —Ç–∫–∞–Ω–∏–Ω", "–ì–µ–ª—å –¥–ª—è –ø—Ä–∞–Ω–Ω—è", "–ë—ñ–ª–∏–∑–Ω–∞"));
        put("–ó–∞—Å–æ–±–∏ –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ —á–∏—â–µ–Ω–Ω—è ", Arrays.asList("–ö—Ä–æ—Ç"));
        put("–ì—ñ–≥—ñ—î–Ω–∞ —Ç–∞ –¥–æ–≥–ª—è–¥", Arrays.asList("–ó—É–±–Ω—ñ –ø–∞—Å—Ç–∏", "–ì—ñ–≥—ñ—î–Ω—ñ—á–Ω—ñ –ø—Ä–æ–∫–ª–∞–¥–∫–∏", "–î–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç–∏", "–¢—É–∞–ª–µ—Ç–Ω–∏–π –ø–∞–ø—ñ—Ä", "–ü–∞–ø–µ—Ä–æ–≤—ñ —Ä—É—à–Ω–∏–∫–∏"));
        put("–õ–∞—Å–æ—â—ñ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω", Arrays.asList("–õ–∞—Å–æ—â—ñ"));
    }};

    public static final Map<String, String> groupToId = Map.ofEntries(
            Map.entry("–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", "group_milk"),
            Map.entry("–Ø–π—Ü—è", "group_eggs"),
            Map.entry("–û–≤–æ—á—ñ", "group_ovochi"),
            Map.entry("–§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏", "group_fruits"),
            Map.entry("–ë–∞–∫–∞–ª—ñ—è", "group_bakaliya"),
            Map.entry("–ö—Ä—É–ø–∞", "group_krupa"),
            Map.entry("–û–≤–æ—á—ñ —ñ —Ñ—Ä—É–∫—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ", "group_frozen"),
            Map.entry("–ü—Ä–∞–ª—å–Ω—ñ –ø–æ—Ä–æ—à–∫–∏ —Ç–∞ –∑–∞—Å–æ–±–∏ –¥–ª—è –ø—Ä–∞–Ω–Ω—è", "group_wash"),
            Map.entry("–ó–∞—Å–æ–±–∏ –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ —á–∏—â–µ–Ω–Ω—è ", "group_cleaning"),
            Map.entry("–ì—ñ–≥—ñ—î–Ω–∞ —Ç–∞ –¥–æ–≥–ª—è–¥", "group_hygiene"),
            Map.entry("–õ–∞—Å–æ—â—ñ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω", "group_pets")
    );

    public static final Map<String, String> idToGroup = groupToId.entrySet().stream()
            .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));

    public static final Map<String, String> subcategoryToGroup = categoryGroups.entrySet().stream()
            .flatMap(entry -> entry.getValue().stream().map(sub -> Map.entry(sub, entry.getKey())))
            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

    private static InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    // –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ö–ê–¢–ï–ì–û–†–Ü–ô
    public static void sendGroupMenu(Long chatId, MyBot bot, int page, Integer messageId) {
        List<String> allGroups = new ArrayList<>(categoryGroups.keySet());
        int start = page * ITEMS_PER_PAGE;
        int end = Math.min(start + ITEMS_PER_PAGE, allGroups.size());

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for (int i = start; i < end; i++) {
            String group = allGroups.get(i);
            keyboard.add(Collections.singletonList(createButton(group, groupToId.get(group))));
        }

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        if (page > 0) navRow.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (page - 1)));
        if (end < allGroups.size()) navRow.add(createButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", "page_" + (page + 1)));
        if (!navRow.isEmpty()) keyboard.add(navRow);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);

        String menuText = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:";

        try {
            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText(menuText);
                editMessage.setReplyMarkup(markup);
                bot.execute(editMessage);
            } else {
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(chatId.toString());
                sendMessage.setText(menuText);
                sendMessage.setReplyMarkup(markup);
                bot.execute(sendMessage);
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    // –ü–Ü–î–ö–ê–¢–ï–ì–û–†–Ü–á
    public static void sendSubcategoryMenu(Long chatId, MyBot bot, String groupName, int page, Integer messageId) {
        List<String> subcategories = categoryGroups.get(groupName);
        if (subcategories == null) return;

        int start = page * ITEMS_PER_PAGE;
        int end = Math.min(start + ITEMS_PER_PAGE, subcategories.size());

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for (int i = start; i < end; i++) {
            String sub = subcategories.get(i);
            String groupId = CategoryButtons.groupToId.get(groupName);
            keyboard.add(Collections.singletonList(createButton(sub, "sub_" + sub + "_" + groupId)));

        }

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        if (page > 0)
            navRow.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "subpage_" + groupName + "_" + (page - 1)));
        if (end < subcategories.size())
            navRow.add(createButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", "subpage_" + groupName + "_" + (page + 1)));
        if (!navRow.isEmpty()) keyboard.add(navRow);
        keyboard.add(Collections.singletonList(
                createButton("üîù –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "main_categories")
        ));
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);

        String menuText = "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:";

        try {
            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText(menuText);
                editMessage.setReplyMarkup(markup);
                bot.execute(editMessage);
            } else {
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(chatId.toString());
                sendMessage.setText(menuText);
                sendMessage.setReplyMarkup(markup);
                bot.execute(sendMessage);
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ü–ï–†–ï–õ–Ü–ö –¢–û–í–ê–†–Ü–í
    public static void sendProductList(Long chatId, MyBot bot, String subcategory, int page, Integer messageId, String groupName) {
        try {
            List<Product> products = ProductFetcher.fetchCheapestProductByCategory(subcategory, groupName);

            if (products == null || products.isEmpty()) {
                bot.sendMessage(chatId, "üîç –¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"" + subcategory + "\" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
                return;
            }

            // –£–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–∑ allMatches), —è–∫—â–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä ‚Äì —Ü–µ "cheapest"
            Set<String> seenTitles = new HashSet<>();
            List<Product> uniqueProducts = new ArrayList<>();

            for (Product p : products) {
                if (!seenTitles.contains(p.getTitle())) {
                    uniqueProducts.add(p);
                    seenTitles.add(p.getTitle());
                }
            }

            // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é
            uniqueProducts.sort(Comparator.comparingDouble(Product::getPrice));

            int start = page * ITEMS_PER_PAGE;
            int end = Math.min(start + ITEMS_PER_PAGE, uniqueProducts.size());

            StringBuilder text = new StringBuilder("üõí –¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: *" + subcategory + "*\n\n");
            for (int i = start; i < end; i++) {
                Product p = uniqueProducts.get(i);
                text.append("üîπ *").append(p.getTitle()).append("*\n")
                        .append("üíµ –¶—ñ–Ω–∞: ").append(p.getPrice()).append(" –≥—Ä–Ω\n")
                        .append("üè¨ –ú–∞–≥–∞–∑–∏–Ω: ").append(p.getStore()).append("\n")
                        .append("üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä—É](").append(p.getUrl()).append(")\n\n");
            }

            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
            List<InlineKeyboardButton> navRow = new ArrayList<>();
            if (page > 0) {
                navRow.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_sub_" + subcategory + "_" + (page - 1)));
            }
            if (end < uniqueProducts.size()) {
                navRow.add(createButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", "page_sub_" + subcategory + "_" + (page + 1)));
            }
            if (!navRow.isEmpty()) {
                keyboard.add(navRow);
            }

            // –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
            keyboard.add(List.of(
                    createButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", CategoryButtons.groupToId.get(groupName)),
                    createButton("üîù –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "main_categories")
            ));

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            markup.setKeyboard(keyboard);

            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText(text.toString());
                editMessage.setParseMode("Markdown");
                editMessage.setReplyMarkup(markup);
                bot.execute(editMessage);
            } else {
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(chatId.toString());
                sendMessage.setText(text.toString());
                sendMessage.setParseMode("Markdown");
                sendMessage.setReplyMarkup(markup);
                bot.execute(sendMessage);
            }

        } catch (IOException | TelegramApiException e) {
            e.printStackTrace();
        }
    }
}