const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");
const path = require("path");

puppeteer.use(StealthPlugin());

async function scrapeProduct(url) {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  try {
    console.log("üöÄ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ:", url);
    await page.goto(url, { waitUntil: "networkidle2", timeout: 60000 });

    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await page.waitForSelector("h1.sf-heading__title", { timeout: 10000 });

    const data = await page.evaluate(() => {
      // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É
      const title =
        document.querySelector("h1.sf-heading__title")?.innerText.trim() || "";

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
      const unavailableButton = document.querySelector(".btn-not-available");
      if (
        unavailableButton &&
        unavailableButton.innerText.includes("–¢–æ–≤–∞—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è")
      ) {
        return { title, unavailable: true }; // –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
      }

      // –í–∏—Ç—è–≥—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ —Ü—ñ–Ω–æ—é
      let priceText =
        document.querySelector(".sf-price__special")?.innerText || // –∞–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞
        document.querySelector(".sf-price__regular")?.innerText || // –∞–±–æ –∑–≤–∏—á–∞–π–Ω–∞
        "";

      // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —á–∏—Å–ª–æ
      let price = parseFloat(
        priceText.replace(/[^\d.,]/g, "").replace(",", ".")
      );

      // –í–∏—Ç—è–≥—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
      const image = document.querySelector(".sf-image picture img")?.src || "";

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É –∑ "—Ö–ª—ñ–±–Ω–∏—Ö –∫—Ä–∏—Ö—Ç"
      const breadcrumbs = document.querySelectorAll(
        ".sf-breadcrumbs__breadcrumb"
      );
      const category =
        breadcrumbs.length >= 2
          ? breadcrumbs[breadcrumbs.length - 2].innerText.trim()
          : "";

      return { title, price, image, category };
    });

    if (!data.title || !data.price) {
      console.log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É:", url);
      await browser.close();
      return null;
    }

    console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ:", data);
    await browser.close();
    return data;
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:", err.message);
    await browser.close();
    return null;
  }
}

async function scrapeProductsFromJson() {
  const jsonFolderPath =
    "C:/Users/Kathryn/Desktop/–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω_–ß–∞—Ç–ë–û–¢/ParserProducts/StorePrice/Varus/json";

  const productsPath = path.join(jsonFolderPath, "productsVarus.json");
  const scrapedResultsPath = path.join(
    jsonFolderPath,
    "scrapedResultsVarus.json"
  );

  const products = JSON.parse(fs.readFileSync(productsPath, "utf8"));
  let scrapedResults = [];

  if (fs.existsSync(scrapedResultsPath)) {
    scrapedResults = JSON.parse(fs.readFileSync(scrapedResultsPath, "utf8"));
  }

  const resultsMap = new Map();
  scrapedResults.forEach((item) => resultsMap.set(item.url, item));

  for (const category in products) {
    const categoryProducts = products[category];

    for (const product of categoryProducts) {
      if (!product.url) {
        console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä –±–µ–∑ URL: ${product.productName}`);
        continue;
      }

      const productData = await scrapeProduct(product.url);
      if (!productData) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞): ${product.url}`);
        continue;
      }

      const key = product.url;
      const existingData = resultsMap.get(key);

      if (
        existingData &&
        existingData.price === productData.price &&
        existingData.category === productData.category
      ) {
        continue; // –ù–µ–º–∞—î –∑–º—ñ–Ω
      }

      if (existingData) {
        console.log(`‚ôªÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: ${product.productName}`);
      } else {
        console.log(`‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É: ${product.productName}`);
      }

      resultsMap.set(key, {
        productName: product.productName,
        url: product.url,
        ...productData,
      });
    }
  }

  const results = Array.from(resultsMap.values());
  console.log("\n‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤:", results.length);
  fs.writeFileSync(
    scrapedResultsPath,
    JSON.stringify(results, null, 2),
    "utf8"
  );
}

if (require.main === module) {
  scrapeProductsFromJson()
    .then(() => {
      console.log("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    })
    .catch((err) => {
      console.error("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:", err);
    });
}

module.exports = scrapeProductsFromJson;
