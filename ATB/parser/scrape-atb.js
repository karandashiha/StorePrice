const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");

puppeteer.use(StealthPlugin());

async function scrapeProduct(url) {
  const browser = await puppeteer.launch({ headless: "new" });
  const page = await browser.newPage();

  try {
    console.log("üöÄ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ:", url);
    await page.goto(url, { waitUntil: "networkidle2", timeout: 60000 });

    // –ß–µ–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await page.waitForSelector("h1.page-title.product-page__title", {
      timeout: 10000,
    }); // –ú–æ–∂–ª–∏–≤–æ –∑–±—ñ–ª—å—à–∏–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

    const data = await page.evaluate(() => {
      const title = document.querySelector("h1.page-title")?.innerText.trim();
      const price = document
        .querySelector(".product-price__top")
        ?.innerText.replace(/[^\d.,]/g, "");
      const image = document.querySelector(
        ".cardproduct-tabs__item.current picture img"
      )?.src;

      const breadcrumbs = document.querySelectorAll(
        ".breadcrumbs__list .breadcrumbs__item a"
      );
      const category = breadcrumbs[breadcrumbs.length - 1]?.innerText.trim(); // <- –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è

      return {
        title,
        price,
        image,
        category,
      };
    });

    if (!data.title || !data.price) {
      console.log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É:", url);
    }

    console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ:", data);
    await browser.close();
    return data;
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:", err.message);
    await browser.close();
    return null;
  }
}

async function scrapeProductsFromJson() {
  const products = JSON.parse(
    fs.readFileSync(
      "C:/Users/Kathryn/Desktop/–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω_–ß–∞—Ç–ë–û–¢/ParserProducts/StorePrice/ATB/json/productsATB.json",
      "utf8"
    )
  );
  const results = [];

  // –ß–∏—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
  let scrapedResults = [];
  if (fs.existsSync("scrapedResultsATB.json")) {
    scrapedResults = JSON.parse(
      fs.readFileSync("scrapedResultsATB.json", "utf8")
    );
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  const resultsMap = new Map();
  scrapedResults.forEach((item) => resultsMap.set(item.productName, item));

  for (const category in products) {
    const categoryProducts = products[category];

    for (const product of categoryProducts) {
      if (product.url) {
        const productData = await scrapeProduct(product.url);
        if (productData) {
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —î –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
          if (resultsMap.has(product.productName)) {
            const existingData = resultsMap.get(product.productName);

            // –Ø–∫—â–æ —Ü—ñ–Ω–∞ –∞–±–æ —ñ–Ω—à—ñ –¥–∞–Ω—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ
            if (
              existingData.price !== productData.price ||
              existingData.category !== productData.category
            ) {
              console.log(`üí° –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: ${product.productName}`);
              resultsMap.set(product.productName, {
                productName: product.productName,
                ...productData,
              });
            }
          } else {
            // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–æ–≤–∏–π, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            console.log(`‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É: ${product.productName}`);
            resultsMap.set(product.productName, {
              productName: product.productName,
              ...productData,
            });
          }
        }
      } else {
        console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –±–µ–∑ URL: ${product.productName}`);
      }
    }
  }

  // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –Ω–∞–∑–∞–¥ –≤ –º–∞—Å–∏–≤ –¥–ª—è –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª
  results.push(...Array.from(resultsMap.values()));

  console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:", JSON.stringify(results, null, 2));
  fs.writeFileSync("scrapedResultsATB.json", JSON.stringify(results, null, 2));
}

if (require.main === module) {
  scrapeProductsFromJson()
    .then(() => {
      console.log("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    })
    .catch((err) => {
      console.error("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:", err);
    });
}

module.exports = scrapeProduct;
